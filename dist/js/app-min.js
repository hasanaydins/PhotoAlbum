window.addEventListener("load",function(){var t=new XMLHttpRequest,e=document.getElementById("albumListe");t.onreadystatechange=function(){if(4==t.readyState&&200==t.status){for(var n=1;n<9;n++)e.innerHTML+=`<li class="list-group-item albumid" data-album-id="${n}"> \n                                          <a href="#"><i class="fas fa-chevron-right"></i>  Album ${n}</a>\n                                        </li>`;var a=document.querySelectorAll(".list-group-item.albumid");Array.from(a).forEach(function(t){var e=t.dataset.albumId;t.addEventListener("click",function(){var t=new XMLHttpRequest;t.onreadystatechange=function(){var n=document.querySelector("#cardDiv");if(4==t.readyState&&200==t.status){var a=JSON.parse(t.responseText);if(a=a.filter(function(t){return t.albumId===parseInt(e)}),n.innerHTML="",window.outerWidth<960)for(var l=0;l<4;l++)n.innerHTML+=`<div class="col-lg-3 col-6 album-thumb" data-full-url="${a[l].url}">\n                                                    <img id="thumbnails" src="${a[l].thumbnailUrl}">\n                                                    <p>${a[l].title}</p>\n                                                  </div>`;else if(window.outerWidth<960)for(l=0;l<8;l++)n.innerHTML+=`<div class="col-lg-3 col-6 album-thumb" data-full-url="${a[l].url}">\n                                                    <img id="thumbnails" src="${a[l].thumbnailUrl}">\n                                                    <p>${a[l].title}</p>\n                                                 </div>`;var r=document.querySelectorAll(".album-thumb");Array.from(r).forEach(function(t){t.addEventListener("click",function(){var e=t.dataset.fullUrl,n=document.getElementsByClassName("closebtn"),a=document.getElementById("bigImage");a?(a.setAttribute("src",e),a.parentElement.style.display="block"):n.style.display="none"})})}},t.open("GET",`https://jsonplaceholder.typicode.com/albums/${e}/photos`),t.send()})})}},t.open("GET","https://jsonplaceholder.typicode.com/albums"),t.send()});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwiWEhSIiwiWE1MSHR0cFJlcXVlc3QiLCJhbGJ1bUxpc3RlIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJpIiwiaW5uZXJIVE1MIiwiYWxidW1JdGVtcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJBcnJheSIsImZyb20iLCJmb3JFYWNoIiwiZWxtIiwiYWxidW1JZCIsImRhdGFzZXQiLCJjYXJkRGl2IiwicXVlcnlTZWxlY3RvciIsInBob3RvcyIsIkpTT04iLCJwYXJzZSIsInJlc3BvbnNlVGV4dCIsImZpbHRlciIsIml0ZW0iLCJwYXJzZUludCIsIm91dGVyV2lkdGgiLCJ0IiwidXJsIiwidGh1bWJuYWlsVXJsIiwidGl0bGUiLCJhbGJ1bVRodW1icyIsImFsYnVtRnVsbFVybCIsImZ1bGxVcmwiLCJpbWFnZUIiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiZXhwYW5kZWRJbWciLCJzZXRBdHRyaWJ1dGUiLCJwYXJlbnRFbGVtZW50Iiwic3R5bGUiLCJkaXNwbGF5Iiwib3BlbiIsInNlbmQiXSwibWFwcGluZ3MiOiJBQUNBQSxPQUFPQyxpQkFBaUIsT0FBUSxXQUM1QixJQUFJQyxFQUFNLElBQUlDLGVBQ1ZDLEVBQWFDLFNBQVNDLGVBQWUsY0FFekNKLEVBQUlLLG1CQUFxQixXQUNyQixHQUFzQixHQUFsQkwsRUFBSU0sWUFBaUMsS0FBZE4sRUFBSU8sT0FBZSxDQUMxQyxJQUFLLElBQUlDLEVBQUksRUFBR0EsRUFBSSxFQUFHQSxJQUNuQk4sRUFBV08saUVBQW1FRCwyR0FDTUEsdURBSzlGLElBQUlFLEVBQWFQLFNBQVNRLGlCQUFpQiw0QkFDdkNDLE1BQU1DLEtBQUtILEdBQVlJLFFBQVEsU0FBU0MsR0FDdEMsSUFBSUMsRUFBVUQsRUFBSUUsUUFBUUQsUUFFeEJELEVBQUloQixpQkFBaUIsUUFBUyxXQUN4QixJQUFJQyxFQUFNLElBQUlDLGVBRWRELEVBQUlLLG1CQUFxQixXQUNyQixJQUFJYSxFQUFVZixTQUFTZ0IsY0FBYyxZQUVyQyxHQUFzQixHQUFsQm5CLEVBQUlNLFlBQWlDLEtBQWROLEVBQUlPLE9BQWUsQ0FFMUMsSUFBSWEsRUFBU0MsS0FBS0MsTUFBTXRCLEVBQUl1QixjQU01QixHQUxBSCxFQUFTQSxFQUFPSSxPQUFPLFNBQVNDLEdBQzVCLE9BQU9BLEVBQUtULFVBQVlVLFNBQVNWLEtBR3JDRSxFQUFRVCxVQUFZLEdBQ2hCWCxPQUFPNkIsV0FBYSxJQUNwQixJQUFLLElBQUlDLEVBQUksRUFBR0EsRUFBSSxFQUFHQSxJQUNuQlYsRUFBUVQscUVBQXVFVyxFQUFPUSxHQUFHQyx3RkFDN0NULEVBQU9RLEdBQUdFLDBFQUNqQ1YsRUFBT1EsR0FBR0csMkVBR2hDLEdBQUlqQyxPQUFPNkIsV0FBYSxJQUMzQixJQUFTQyxFQUFJLEVBQUdBLEVBQUksRUFBR0EsSUFDbkJWLEVBQVFULHFFQUF1RVcsRUFBT1EsR0FBR0Msd0ZBQzdDVCxFQUFPUSxHQUFHRSwwRUFDakNWLEVBQU9RLEdBQUdHLHFFQUt6RCxJQUFJQyxFQUFjN0IsU0FBU1EsaUJBQWlCLGdCQUNyQ0MsTUFBTUMsS0FBS21CLEdBQWFsQixRQUFRLFNBQVNDLEdBQ2xDQSxFQUFJaEIsaUJBQWlCLFFBQVMsV0FDMUIsSUFBSWtDLEVBQWVsQixFQUFJRSxRQUFRaUIsUUFDM0JDLEVBQVNoQyxTQUFTaUMsdUJBQXVCLFlBQ3pDQyxFQUFjbEMsU0FBU0MsZUFBZSxZQUNqQ2lDLEdBSURBLEVBQVlDLGFBQWEsTUFBT0wsR0FDaENJLEVBQVlFLGNBQWNDLE1BQU1DLFFBQVUsU0FKeENOLEVBQU9LLE1BQU1DLFFBQVUsYUFTekN6QyxFQUFJMEMsS0FBSyxxREFBc0QxQixZQUMvRGhCLEVBQUkyQyxhQUtwQjNDLEVBQUkwQyxLQUFLLE1BQU8sK0NBQ2hCMUMsRUFBSTJDIiwic291cmNlc0NvbnRlbnQiOlsiICAgLy8vLyBBbGJ1bSBsaXN0ZWxlcmluaW4gZ2V0aXJpbG1lc2lcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgWEhSID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgdmFyIGFsYnVtTGlzdGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWxidW1MaXN0ZScpO1xuXG4gICAgWEhSLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoWEhSLnJlYWR5U3RhdGUgPT0gNCAmJiBYSFIuc3RhdHVzID09IDIwMCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCA5OyBpKyspIHtcbiAgICAgICAgICAgICAgICBhbGJ1bUxpc3RlLmlubmVySFRNTCArPSBgPGxpIGNsYXNzPVwibGlzdC1ncm91cC1pdGVtIGFsYnVtaWRcIiBkYXRhLWFsYnVtLWlkPVwiJHtpfVwiPiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIjXCI+PGkgY2xhc3M9XCJmYXMgZmEtY2hldnJvbi1yaWdodFwiPjwvaT4gIEFsYnVtICR7aX08L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5gO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgLy8vLyBBbGJ1bSB0aHVtYm5haWxsZXJpbmluIGdldGlyaWxtZXNpXG4gICAgICB2YXIgYWxidW1JdGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5saXN0LWdyb3VwLWl0ZW0uYWxidW1pZCcpO1xuICAgICAgICAgIEFycmF5LmZyb20oYWxidW1JdGVtcykuZm9yRWFjaChmdW5jdGlvbihlbG0pIHtcbiAgICAgICAgICAgIHZhciBhbGJ1bUlkID0gZWxtLmRhdGFzZXQuYWxidW1JZDtcblxuICAgICAgICAgICAgICBlbG0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgWEhSID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgWEhSLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhcmREaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY2FyZERpdicpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoWEhSLnJlYWR5U3RhdGUgPT0gNCAmJiBYSFIuc3RhdHVzID09IDIwMCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBob3RvcyA9IEpTT04ucGFyc2UoWEhSLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGhvdG9zID0gcGhvdG9zLmZpbHRlcihmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmFsYnVtSWQgPT09IHBhcnNlSW50KGFsYnVtSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZERpdi5pbm5lckhUTUwgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3cub3V0ZXJXaWR0aCA8IDk2MCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgdCA9IDA7IHQgPCA0OyB0KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmREaXYuaW5uZXJIVE1MICs9IGA8ZGl2IGNsYXNzPVwiY29sLWxnLTMgY29sLTYgYWxidW0tdGh1bWJcIiBkYXRhLWZ1bGwtdXJsPVwiJHtwaG90b3NbdF0udXJsfVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9XCJ0aHVtYm5haWxzXCIgc3JjPVwiJHtwaG90b3NbdF0udGh1bWJuYWlsVXJsfVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPiR7cGhvdG9zW3RdLnRpdGxlfTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+YDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAod2luZG93Lm91dGVyV2lkdGggPCA5NjApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgdCA9IDA7IHQgPCA4OyB0KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmREaXYuaW5uZXJIVE1MICs9IGA8ZGl2IGNsYXNzPVwiY29sLWxnLTMgY29sLTYgYWxidW0tdGh1bWJcIiBkYXRhLWZ1bGwtdXJsPVwiJHtwaG90b3NbdF0udXJsfVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9XCJ0aHVtYm5haWxzXCIgc3JjPVwiJHtwaG90b3NbdF0udGh1bWJuYWlsVXJsfVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPiR7cGhvdG9zW3RdLnRpdGxlfTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5gO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8vLyBGdWxsIGZvdG9nZmFyxLFuxLFuIGdldGlyaWxtZXNpXG4gICAgICAgICAgdmFyIGFsYnVtVGh1bWJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmFsYnVtLXRodW1iJyk7XG4gICAgICAgICAgICAgICAgIEFycmF5LmZyb20oYWxidW1UaHVtYnMpLmZvckVhY2goZnVuY3Rpb24oZWxtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbG0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWxidW1GdWxsVXJsID0gZWxtLmRhdGFzZXQuZnVsbFVybDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW1hZ2VCID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnY2xvc2VidG4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXhwYW5kZWRJbWcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmlnSW1hZ2UnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFleHBhbmRlZEltZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZUIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBhbmRlZEltZy5zZXRBdHRyaWJ1dGUoJ3NyYycsIGFsYnVtRnVsbFVybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBhbmRlZEltZy5wYXJlbnRFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBYSFIub3BlbihcIkdFVFwiLCBgaHR0cHM6Ly9qc29ucGxhY2Vob2xkZXIudHlwaWNvZGUuY29tL2FsYnVtcy8ke2FsYnVtSWR9L3Bob3Rvc2ApO1xuICAgICAgICAgICAgICAgICAgICBYSFIuc2VuZCgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgWEhSLm9wZW4oXCJHRVRcIiwgXCJodHRwczovL2pzb25wbGFjZWhvbGRlci50eXBpY29kZS5jb20vYWxidW1zXCIpO1xuICAgIFhIUi5zZW5kKCk7XG59KTsiXX0=