window.addEventListener("load",function(){var t=new XMLHttpRequest,e=document.getElementById("albumListe");t.onreadystatechange=function(){if(4==t.readyState&&200==t.status){for(var n=1;n<11;n++)e.innerHTML+=`<li class="list-group-item albumid" data-album-id="${n}"> \n                                          <a href="#"><i class="fas fa-chevron-right"></i>  Album ${n}</a>\n                                         </li>`;var a=document.querySelectorAll(".list-group-item.albumid");Array.from(a).forEach(function(t){var e=t.dataset.albumId;t.addEventListener("click",function(){var t=new XMLHttpRequest;t.onreadystatechange=function(){var n=document.querySelector("#cardDiv");if(4==t.readyState&&200==t.status){var a=JSON.parse(t.responseText);if(a=a.filter(function(t){return t.albumId===parseInt(e)}),n.innerHTML="",window.outerWidth<960)for(var l=0;l<4;l++)n.innerHTML+=`<div class="col-lg-3 col-6 album-thumb" data-full-url="${a[l].url}">\n                                                    <img id="thumbnails" src="${a[l].thumbnailUrl}">\n                                                    <p>${a[l].title}</p>\n                                                  </div>`;else if(window.outerWidth>=960)for(l=0;l<8;l++)n.innerHTML+=`<div class="col-lg-3 col-6 album-thumb" data-full-url="${a[l].url}">\n                                                    <img id="thumbnails" src="${a[l].thumbnailUrl}">\n                                                    <p>${a[l].title}</p>\n                                                 </div>`;var r=document.querySelectorAll(".album-thumb");Array.from(r).forEach(function(t){t.addEventListener("click",function(){var e=t.dataset.fullUrl,n=document.getElementsByClassName("closebtn"),a=document.getElementById("bigImage");a?(a.setAttribute("src",e),a.parentElement.style.display="block"):n.style.display="none"})})}},t.open("GET",`https://jsonplaceholder.typicode.com/albums/${e}/photos`),t.send()})})}},t.open("GET","https://jsonplaceholder.typicode.com/albums"),t.send()});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,